/**
 * 网络模块
 *
 * @author <a href="wangyi@chukong-inc.com">Shao</a>
 * @version 0.0.1
 * @date 2013.09.05
 */
var util = require('util');
var fs = require('fs');
var EventEmitter = require('events').EventEmitter;
var logger = require('ss-logger').getLogger(__filename);
var express = require('express');

/**
 * 网络连接器
 * @extends EventEmitter
 * @author neil
 */
var Connector = function() {
    EventEmitter.call(this);
    this.name = '';
    this.host = ''; // 服务器IP
    this.port = 0; // 监听端口
    this.server = null; // 服务器实例
    this.handler_get = {}; // get 消息包处理对象存放列表 { url : handler }
    this.handleDoc_get = {}; // get 消息包描述对象存放列表 { url : description }

    this.handler_post = {}; // post 消息包处理对象存放列表 { url : handler }
    this.handleDoc_post = {}; // post 消息包描述对象存放列表 { url : description }

    this.verifyMsg = null; // 通讯数据包校验
};

util.inherits(Connector, EventEmitter);

/**
 * 配置服务器相关
 *
 * @param {String} type 配置类型: "server" 是服务器配置, "handle"是消息处理配置
 * @param {String} config 配置文件路径
 */
Connector.prototype.configure = function(type, config) {

    // 如果为文件路径. 加载文件
    if (type !== 'verifyMsg' && typeof config === 'string') {
        config = JSON.parse(fs.readFileSync(config, "utf8"));
    }

    if (type === 'server') {
        this.name = config.name || 'web';
        this.type = config.type || 'http';
        this.host = config.host;
        this.port = config.port;
    } else if (type === 'handle') {

        for (var i in config) {
            this.loadHandler(config[i]);
        }
    } else if (type === 'verifyMsg' && config !== 'verifyMessage') {
        this.verifyMsg = config;
    }
};

/**
 * 读取协议处理函数
 *
 * @param {Object} opts 一条协议的配置参数
 */
Connector.prototype.loadHandler = function(opts) {

    var path = util.format('%s/handle/%s', process.cwd(), opts.path);

    var handler = require(path);

    if (opts.type == 'get') {

        if (this.addHandlerGet(opts, handler)) {
            logger.info('读取协议处理成功! [ %s ][ %s ] url[ %s ] path[ %s ]', opts.type, opts.description, opts.url, opts.path);
        } else {
            logger.error('读取协议处理失败! [ %s ] url[ %s ] path[ %s ]', opts.type, opts.description, opts.url, path);
        }
    } else if (opts.type == 'post') {
        if (this.addHandlerPost(opts, handler)) {
            logger.info('读取协议处理成功! [ %s ][ %s ] url[ %s ] path[ %s ]', opts.type, opts.description, opts.url, opts.path);
        } else {
            logger.error('读取协议处理失败! [ %s ] url[ %s ] path[ %s ]', opts.type, opts.description, opts.url, path);
        }
    } else if (opts.type == 'all') {
        if (this.addHandlerGet(opts, handler) && this.addHandlerPost(opts, handler)) {
            logger.info('读取协议处理成功! [ %s ][ %s ] url[ %s ] path[ %s ]', opts.type, opts.description, opts.url, opts.path);
        } else {
            logger.error('读取协议处理失败! [ %s ] url[ %s ] path[ %s ]', opts.type, opts.description, opts.url, path);
        }
    } else {
        logger.error('读取协议处理失败! [ %s ] url[ %s ] path[ %s ]', opts.type, opts.description, opts.url, path);
    }
};

/**
 * 加载get请求相关
 * @param {Object} opts 一条协议的配置参数
 * @param {Object} handler 处理协议回调对象
 */
Connector.prototype.addHandlerGet = function(opts, handler) {
    if (this.handler_get[opts.url]) {
        logger.error('读取协议处理错误! 协议已存在 [ %s ] url[ %s ]', opts.description, opts.url);
        return false;
    }
    var func = null;
    if (typeof handler.get === 'function') {
        func = handler.get;
    } else if (typeof handler.handle === 'function') {
        func = handler.handle;
    }
    if (func) {
        this.on('get' + opts.url, func);
        this.handler_get[opts.url] = func;
        this.handleDoc_get[opts.url] = opts.description;
        return true;
    }
    return false;
};

/**
 * 加载post请求相关
 * @param {Object} opts 一条协议的配置参数
 * @param {Object} handler 处理协议回调对象
 */
Connector.prototype.addHandlerPost = function(opts, handler) {
    if (this.handler_post[opts.url]) {
        logger.error('读取协议处理错误! 协议已存在 [ %s ] url[ %s ]', opts.description, opts.url);
        return false;
    }
    var func = null;
    if (typeof handler.post === 'function') {
        func = handler.post;
    } else if (typeof handler.handle === 'function') {
        func = handler.handle;
    }
    if (func) {
        this.on('post' + opts.url, func);
        this.handler_post[opts.url] = func;
        this.handleDoc_post[opts.url] = opts.description;
        return true;
    }
    return false;
};

/**
 * 创建get请求处理相关
 * @param {Object} opts 一条协议的配置参数
 * @param {Object} handler 处理协议回调对象
 */
function createGetHanler(url, self) {

    self.server.get(url, function(req, res) {
        var endcb = function(body) {
            if (!body) {
                body = {
                    code: 200
                };
            }
            logger.debug('服务器回包[ %s ]', JSON.stringify(body));
            res.end(JSON.stringify(body) + '\n', 'utf8');
        };
        var clientip = req.connection.remoteAddress;
        logger.debug('接收到客户端[%s] [%s]请求: %s', clientip, req.method, req.url);

        var args = req.query;
        self.httpMessage(clientip, url, args, endcb, req, res, 'get');
    });
};

/**
 * 创建 http 服务器
 *
 * @param {String} host 绑定服务器ip
 * @param {Number} port 服务器监听端口
 */
Connector.prototype.createHttpServer = function() {

    //创建web服务
    var self = this;
    self.server = express();

    self.server.configure(function() {

        var pub = process.cwd() + '/public';
        var view = process.cwd() + '/views';
        self.server.engine('html', require('ejs').renderFile);
        self.server.set('views', view);
        self.server.set('view engine', 'html');
        self.server.set('view options', {
            layout: false
        });

        self.server.use(express.bodyParser({
            uploadDir: process.cwd() + '/uploads'
        }));

        self.server.use(express.cookieParser());
        self.server.use(express.session({
            secret: 'vitServers'
        }));

        self.server.use(express.methodOverride());
        self.server.use(self.server.router);
        //以当前目录下的public目录为web应用根目录
        var oneYear = 31557600000;
        self.server.use(express.static(pub), {
            maxAge: oneYear
        });
    });
    // 开发模式
    self.server.configure('development', function() {
        //显示错误信息，以方便调试
        self.server.use(express.errorHandler({
            dumpExceptions: true,
            showStack: true
        }));
    });
    // 生产模式
    self.server.configure('production', function() {

        self.server.use(express.errorHandler());
    });

    self.server.on('error', function(err) {
        logger.error('app on error: %s', err.stack);
    });

    for (var url in self.handler_get) {
        createGetHanler(url, self);
    }

    self.server.post('*', function(req, res) {

        var endcb = function(body) {
            if (!body) {
                body = {
                    code: 200
                };
            }
            logger.debug('#####s2c:  [ %s ]', JSON.stringify(body));
            res.end(JSON.stringify(body) + '\n', 'utf8');
        };
        var clientip = req.connection.remoteAddress;
        logger.debug('接收到客户端[%s] [%s]请求: %s', clientip, req.method, req.url);

        var url = req.url;
        var args = req.body;
        self.httpMessage(clientip, url, args, endcb, req, res, 'post');
    });

    //启动express web服务，监听端口
    self.server.listen(self.port, self.host || '');
    logger.debug('创建 http 服务器  %s://%s:%d', self.type, self.host, self.port);
};

/**
 * 数据协议解析
 *
 * @param {String} clientip 客户端ip
 * @param {String} urlpath url路径
 * @param {Object} args 数据包
 * @param {Function} endcb 结束回调函数
 */
Connector.prototype.httpMessage = function(clientip, urlpath, args, endcb, req, res, type) {
    if (urlpath === '/test') {
        var text = util.format('[ %s-Server ]test connect succeed!', this.name);
        endcb({
            code: text
        });
        return;
    }
    //    try{
    var self = this;
    if (!args) {
        args = {};
    }
    args.urlpath = urlpath;
    logger.info('[ %s-Server ]数据内容验证[ %s ]', self.name, JSON.stringify(args));
    this.verifyMessage(args, endcb, function(result, data) {

        if (result) {
            logger.error('[ %s-Server ] 数据验证未通过!', self.name);
            return;
        }

        if (self['handler_' + type][urlpath]) {

            logger.debug('[ %s-Server ]数据协议解析 url[ %s ] [ %s ]  #####c2s data:[ %s ]', self.name, urlpath, self['handleDoc_' + type][urlpath], JSON.stringify(data));
            self.emit(type + urlpath, clientip, data, endcb, req, res);
        } else {
            logger.error('[ %s-Server ]收到未知请求 urlpath[ %s ] data[ %s ]', self.name, urlpath, JSON.stringify(data));
            endcb({
                error: '收到未知请求[' + urlpath + ']'
            });
        }
    }, req, res);
    //    }catch(e){
    //        logger.error("try parseMessage %s", e);
    //        endcb();
    //    }
};

/**
 * 数据验证
 *
 * @param {Object} args 数据包
 * @param {Function} endcb 结束回调函数
 */
Connector.prototype.verifyMessage = function(args, endcb, result, req, res) {
    if (this.verifyMsg && typeof this.verifyMsg === 'function') {
        logger.info('[ %s-Server ]数据内容验证[ %s ]', this.name, JSON.stringify(args));
        this.verifyMsg(args, endcb, result, req, res);
    } else {
        result(false, args);
    }
};


/**
 * 开启服务器
 */
Connector.prototype.start = function() {

    if (this.type === 'http') {
        this.createHttpServer();
    } else {
        logger.error('开启服务器 类型错误! this.type = [ %s ]', this.type);
    }
};

/**
 * 停止服务器
 */
Connector.prototype.stop = function() {

};


module.exports = Connector;